name: Build and Publish to npm

on:
  push:
    tags:
      - 'v*'  # This will trigger on version tags like v1.0.0, v2.1.0, etc.
  workflow_dispatch:  # Allow manual triggering

env:
  PACKAGE_NAME: "@99xio/xians-sdk-typescript"
  NPM_REGISTRY: https://registry.npmjs.org

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: ${{ env.NPM_REGISTRY }}
        
    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.2.3 or 1.2.3-beta)"
          exit 1
        fi
        echo "Version format is valid: $VERSION"
        
    - name: Update package.json version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          npm version $VERSION --no-git-tag-version
          echo "Updated package.json to version $VERSION"
        else
          echo "package.json already at version $VERSION"
        fi
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests only (AuthMethodsConsistency)
      run: npx vitest run test/AuthMethodsConsistency.test.ts

    - name: Build package
      run: npm run build
      
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la dist/
        if [ ! -f "dist/index.js" ] || [ ! -f "dist/index.esm.js" ] || [ ! -f "dist/index.d.ts" ]; then
          echo "❌ Build output incomplete"
          exit 1
        fi
        echo "✅ Build output verified"
        
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Generate build summary
      run: |
        echo "## 📦 npm Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** \`${{ env.PACKAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**npm install:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "npm install ${{ env.PACKAGE_NAME }}@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**yarn add:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "yarn add ${{ env.PACKAGE_NAME }}@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**pnpm add:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "pnpm add ${{ env.PACKAGE_NAME }}@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Import in TypeScript/JavaScript:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`typescript" >> $GITHUB_STEP_SUMMARY
        echo "import { AgentSDK, RestSDK, SocketSDK, SseSDK } from '${{ env.PACKAGE_NAME }}';" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 